/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FoldableAction, FoldableItem } from "./components/foldable-component/foldable-component";
export { FoldableAction, FoldableItem } from "./components/foldable-component/foldable-component";
export namespace Components {
    interface BeautifulOrcid {
        /**
          * The date of the affiliation to display. (optional) Defaults to the current date.
          * @type {Date}
         */
        "affiliationAt": Date;
        /**
          * The ORCiD to display, evaluate and link in this component. (required)
          * @type {string}
         */
        "orcid": string;
        /**
          * Whether to show the affiliation or not. (optional) Defaults to true.
          * @type {boolean}
         */
        "showAffiliation": boolean;
        /**
          * Whether to show the department of the affiliation or not. Depends internally on availability of the department in the ORCiD information. (optional) Defaults to false.
          * @type {boolean}
         */
        "showDepartment": boolean;
        /**
          * Whether to show the ORCiD inline or not. (optional) Defaults to false.
          * @type {boolean}
         */
        "showOrcid": boolean;
    }
    interface FoldableComponent {
        "actions": FoldableAction[];
        /**
          * Should the table inside the component change colors every other line?
         */
        "changingColors": boolean;
        /**
          * The current elevation level of the subcomponents. If the difference between the current level and the level of the subcomponents is 0, the subcomponents are not shown.
         */
        "currentLevelOfSubcomponents": number;
        "items": FoldableItem[];
        /**
          * The maximum level of subcomponents to show.
         */
        "levelOfSubcomponents": number;
        /**
          * Should the details element be open by default?
         */
        "openStatus": boolean;
        /**
          * Should the subcomponents be shown?
         */
        "showSubcomponents": boolean;
    }
    /**
     * This component highlights a handle and links to the FAIR DO Scope.
     * It automatically generates colors for the parts of the handle (prefix and suffix) to make them easily distinguishable.
     */
    interface HandleHighlight {
        /**
          * Whether the component should use the filled or the outlined design.
         */
        "filled": boolean;
        /**
          * The Handle to highlight and link in this component.
         */
        "handle": string;
        /**
          * An optional custom link to use instead of the default one which links to the FAIR DO Scope.
         */
        "linkTo": "disable" | "fairdoscope" | "resolveRef";
    }
    interface IntelligentHandle {
        /**
          * Should the table inside the component change colors every other line?
         */
        "changingColors": boolean;
        /**
          * The current elevation level of the subcomponents. If the difference between the current level and the level of the subcomponents is 0, the subcomponents are not shown.
         */
        "currentLevelOfSubcomponents": number;
        /**
          * The Handle to highlight and link in this component.
         */
        "handle": string;
        /**
          * The maximum level of subcomponents to show.
         */
        "levelOfSubcomponents": number;
        /**
          * Should the details element be open by default?
         */
        "openStatus": boolean;
        /**
          * Should the subcomponents be shown?
         */
        "showSubcomponents": boolean;
    }
    interface UsefulOrcid {
        /**
          * The date of the affiliation to display. (optional) Defaults to the current date.
          * @type {Date}
         */
        "affiliationAt": Date;
        /**
          * Should the table inside the component change colors every other line?
         */
        "changingColors": boolean;
        /**
          * Should the details element be open by default?
         */
        "openStatus": boolean;
        /**
          * The ORCiD to display, evaluate and link in this component. (required)
          * @type {string}
         */
        "orcid": string;
        /**
          * Whether to show the affiliation or not. (optional) Defaults to true.
          * @type {boolean}
         */
        "showAffiliation": boolean;
        /**
          * Whether to show the department of the affiliation or not. Depends internally on availability of the department in the ORCiD information. (optional) Defaults to false.
          * @type {boolean}
         */
        "showDepartment": boolean;
        /**
          * Whether to show the ORCiD inline or not. (optional) Defaults to false.
          * @type {boolean}
         */
        "showOrcid": boolean;
    }
}
declare global {
    interface HTMLBeautifulOrcidElement extends Components.BeautifulOrcid, HTMLStencilElement {
    }
    var HTMLBeautifulOrcidElement: {
        prototype: HTMLBeautifulOrcidElement;
        new (): HTMLBeautifulOrcidElement;
    };
    interface HTMLFoldableComponentElement extends Components.FoldableComponent, HTMLStencilElement {
    }
    var HTMLFoldableComponentElement: {
        prototype: HTMLFoldableComponentElement;
        new (): HTMLFoldableComponentElement;
    };
    /**
     * This component highlights a handle and links to the FAIR DO Scope.
     * It automatically generates colors for the parts of the handle (prefix and suffix) to make them easily distinguishable.
     */
    interface HTMLHandleHighlightElement extends Components.HandleHighlight, HTMLStencilElement {
    }
    var HTMLHandleHighlightElement: {
        prototype: HTMLHandleHighlightElement;
        new (): HTMLHandleHighlightElement;
    };
    interface HTMLIntelligentHandleElement extends Components.IntelligentHandle, HTMLStencilElement {
    }
    var HTMLIntelligentHandleElement: {
        prototype: HTMLIntelligentHandleElement;
        new (): HTMLIntelligentHandleElement;
    };
    interface HTMLUsefulOrcidElement extends Components.UsefulOrcid, HTMLStencilElement {
    }
    var HTMLUsefulOrcidElement: {
        prototype: HTMLUsefulOrcidElement;
        new (): HTMLUsefulOrcidElement;
    };
    interface HTMLElementTagNameMap {
        "beautiful-orcid": HTMLBeautifulOrcidElement;
        "foldable-component": HTMLFoldableComponentElement;
        "handle-highlight": HTMLHandleHighlightElement;
        "intelligent-handle": HTMLIntelligentHandleElement;
        "useful-orcid": HTMLUsefulOrcidElement;
    }
}
declare namespace LocalJSX {
    interface BeautifulOrcid {
        /**
          * The date of the affiliation to display. (optional) Defaults to the current date.
          * @type {Date}
         */
        "affiliationAt"?: Date;
        /**
          * The ORCiD to display, evaluate and link in this component. (required)
          * @type {string}
         */
        "orcid": string;
        /**
          * Whether to show the affiliation or not. (optional) Defaults to true.
          * @type {boolean}
         */
        "showAffiliation"?: boolean;
        /**
          * Whether to show the department of the affiliation or not. Depends internally on availability of the department in the ORCiD information. (optional) Defaults to false.
          * @type {boolean}
         */
        "showDepartment"?: boolean;
        /**
          * Whether to show the ORCiD inline or not. (optional) Defaults to false.
          * @type {boolean}
         */
        "showOrcid"?: boolean;
    }
    interface FoldableComponent {
        "actions"?: FoldableAction[];
        /**
          * Should the table inside the component change colors every other line?
         */
        "changingColors"?: boolean;
        /**
          * The current elevation level of the subcomponents. If the difference between the current level and the level of the subcomponents is 0, the subcomponents are not shown.
         */
        "currentLevelOfSubcomponents"?: number;
        "items"?: FoldableItem[];
        /**
          * The maximum level of subcomponents to show.
         */
        "levelOfSubcomponents"?: number;
        /**
          * Should the details element be open by default?
         */
        "openStatus"?: boolean;
        /**
          * Should the subcomponents be shown?
         */
        "showSubcomponents"?: boolean;
    }
    /**
     * This component highlights a handle and links to the FAIR DO Scope.
     * It automatically generates colors for the parts of the handle (prefix and suffix) to make them easily distinguishable.
     */
    interface HandleHighlight {
        /**
          * Whether the component should use the filled or the outlined design.
         */
        "filled"?: boolean;
        /**
          * The Handle to highlight and link in this component.
         */
        "handle": string;
        /**
          * An optional custom link to use instead of the default one which links to the FAIR DO Scope.
         */
        "linkTo"?: "disable" | "fairdoscope" | "resolveRef";
    }
    interface IntelligentHandle {
        /**
          * Should the table inside the component change colors every other line?
         */
        "changingColors"?: boolean;
        /**
          * The current elevation level of the subcomponents. If the difference between the current level and the level of the subcomponents is 0, the subcomponents are not shown.
         */
        "currentLevelOfSubcomponents"?: number;
        /**
          * The Handle to highlight and link in this component.
         */
        "handle": string;
        /**
          * The maximum level of subcomponents to show.
         */
        "levelOfSubcomponents"?: number;
        /**
          * Should the details element be open by default?
         */
        "openStatus"?: boolean;
        /**
          * Should the subcomponents be shown?
         */
        "showSubcomponents"?: boolean;
    }
    interface UsefulOrcid {
        /**
          * The date of the affiliation to display. (optional) Defaults to the current date.
          * @type {Date}
         */
        "affiliationAt"?: Date;
        /**
          * Should the table inside the component change colors every other line?
         */
        "changingColors"?: boolean;
        /**
          * Should the details element be open by default?
         */
        "openStatus"?: boolean;
        /**
          * The ORCiD to display, evaluate and link in this component. (required)
          * @type {string}
         */
        "orcid": string;
        /**
          * Whether to show the affiliation or not. (optional) Defaults to true.
          * @type {boolean}
         */
        "showAffiliation"?: boolean;
        /**
          * Whether to show the department of the affiliation or not. Depends internally on availability of the department in the ORCiD information. (optional) Defaults to false.
          * @type {boolean}
         */
        "showDepartment"?: boolean;
        /**
          * Whether to show the ORCiD inline or not. (optional) Defaults to false.
          * @type {boolean}
         */
        "showOrcid"?: boolean;
    }
    interface IntrinsicElements {
        "beautiful-orcid": BeautifulOrcid;
        "foldable-component": FoldableComponent;
        "handle-highlight": HandleHighlight;
        "intelligent-handle": IntelligentHandle;
        "useful-orcid": UsefulOrcid;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "beautiful-orcid": LocalJSX.BeautifulOrcid & JSXBase.HTMLAttributes<HTMLBeautifulOrcidElement>;
            "foldable-component": LocalJSX.FoldableComponent & JSXBase.HTMLAttributes<HTMLFoldableComponentElement>;
            /**
             * This component highlights a handle and links to the FAIR DO Scope.
             * It automatically generates colors for the parts of the handle (prefix and suffix) to make them easily distinguishable.
             */
            "handle-highlight": LocalJSX.HandleHighlight & JSXBase.HTMLAttributes<HTMLHandleHighlightElement>;
            "intelligent-handle": LocalJSX.IntelligentHandle & JSXBase.HTMLAttributes<HTMLIntelligentHandleElement>;
            "useful-orcid": LocalJSX.UsefulOrcid & JSXBase.HTMLAttributes<HTMLUsefulOrcidElement>;
        }
    }
}
